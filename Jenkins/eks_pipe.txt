pipeline {
    agent any

    environment {
        AWS_DEFAULT_REGION = 'ap-south-1' // Your AWS region
        GITHUB_REPO = 'https://github.com/Vijay09261/NetflixClone.git'
        AWS_ACCESS_KEY_ID = credentials('b8e9ba93-96da-4f8c-a6ef-071cbf986078') // Jenkins AWS credentials ID
        AWS_SECRET_ACCESS_KEY = credentials('b8e9ba93-96da-4f8c-a6ef-071cbf986078') // Jenkins AWS credentials ID
        SSH_PRIVATE_KEY_ID = 'eu_north_ssh_key' // SSH credential ID
    }

    stages {
        // Stage to clone the GitHub repository on the Jenkins instance
        stage('Clone Repository on Jenkins Instance') {
            steps {
                git url: "${GITHUB_REPO}", branch: 'main' // Modify branch if needed
            }
        }

        // Stage to perform Terraform actions
        stage('Terraform Actions') {
            steps {
                script {
                    // Navigate to the terraform directory and run Terraform commands
                    sh '''
                        cd terraform
                        terraform init
                        terraform plan -out=tfplan
                        terraform apply -auto-approve tfplan
                    '''
                    
                    // Capture the host instance IP from Terraform outputs
                    env.HOST_INSTANCE_IP = sh(script: 'cd terraform && terraform output -raw host_instance_ip', returnStdout: true).trim()
                    echo "Host Instance IP: ${env.HOST_INSTANCE_IP}"
                }
            }
        }

        // Stage to generate the host.ini file dynamically for Ansible
        stage('Generate host.ini for Ansible') {
            steps {
                script {
                    // Create the host.ini file dynamically using the captured IP
                    writeFile file: 'host.ini', text: """
                    [host_instance]
                    ${env.HOST_INSTANCE_IP} ansible_ssh_user=ec2-user ansible_ssh_private_key_file=/home/ec2-user/.ssh/eu_north.pem
                    """
                }
            }
        }

        // Stage to install Docker using Ansible
        stage('Install Docker using Ansible') {
            steps {
                script {
                    // Start the ssh-agent and load the private key using Jenkins credentials
                    sshagent(['eu_north_ssh_key']) {
                        // Run the Ansible playbook using the generated host.ini
                        sh '''
                            cd Ansible
                             ansible-playbook install_docker_sonarqube.yml -i ../host.ini

                        '''
                    }
                }
            }
        }
    }

    // Post-build actions to handle success or failure
    post {
        success {
            echo 'Deployment and Docker installation were successful!'
        }
        failure {
            echo 'Deployment or Docker installation failed.'
        }
    }
}
